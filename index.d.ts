/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface AouResponse {
  status?: number
  statusMessage?: Record<string,string>
  headers?: Record<string, string>
  body: any
}
export interface AouOptions {
  json?: boolean
}
export type Request = AouRequest
export declare class AouRequest {
  params: {}
  query: Record<string, string>
  static fromString(request: string): Request
  get method(): string
  get path(): string
  get httpVersion(): string
  get headers(): Record<string, string>
  get body(): string
}
export declare class AouInstance {
  ip: string
  port: number
}
export declare class AouServer {
  constructor(options?: AouOptions | undefined | null)
  get(route:void,handler:void): void
  head(route:void,handler:void): void
  post(route:void,handler:void): void
  put(route:void,handler:void): void
  delete(route:void,handler:void): void
  connect(route:void,handler:void): void
  options(route:void,handler:void): void
  trace(route:void,handler:void): void
  patch(route:void,handler:void): void
  all(route:void,handler:void): void
  listen(host: string, port: number): Promise<AouInstance>
}
type RemoveLeadingChar<
  TLeading extends string,
  TString extends string
> = TString extends `${TLeading}${infer R}` ? R : TString;

type ParamsFromRoute<T extends string> =
  T extends `${string}{${infer L}}${infer R}`
    ? {
        [key in RemoveLeadingChar<"*", L>]: string;
      } & ParamsFromRoute<R>
    : {};

declare interface AouServer {
  get<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  head<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  post<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  put<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  delete<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  connect<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  options<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  trace<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  patch<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
  all<TRoute extends string, TParams extends ParamsFromRoute<TRoute>>(
    route: TRoute,
    handler: (req: AouRequest & { params: TParams }) => Promise<AouResponse>
  ): void;
}
